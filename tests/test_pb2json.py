import pytest
import shutil
import subprocess
import json
from pprint import pprint

class ProtocRunner:
    def __init__(self, tmpdir):
        self.tmpdir = tmpdir
        self.outdir = tmpdir

    # TODO: leverage pytest-virtualenv?
    def install(self):
        moddir = self.tmpdir.mkdir('mkpbdocs')
        shutil.copy('mkpbdocs/__init__.py', str(moddir))
        shutil.copy('mkpbdocs/pb2json.py', str(moddir))
        shutil.copy('bin/protoc-gen-pbdocs', str(self.tmpdir))
#       cmd = 'python setup.py develop --prefix %s' \
#           % (str(self.tmpdir))
#       print cmd
#       subprocess.call(cmd, shell=True)

    def run(self, *proto_files):
#       self.install()
#       cmd = 'cd %s; PATH=.:$PATH protoc --pbdocs_out=%s %s'
        cmd = 'cd %s; protoc --pbdocs_out=%s %s' \
            % (self.tmpdir, str(self.outdir), ' '.join(proto_files))
        print cmd
        return subprocess.call(cmd, shell=True)

    def json(self, file):
        with open(str(self.outdir.join(file))) as f:
            return json.load(f)

@pytest.fixture(scope="function")
def protoc(tmpdir):
    """Return a ProtocRunner instance that provides these methods:
    * ``run(*proto_files)``: run protobuf compiler with protoc-gen-docjson plugin
    * ``json(file)``: load as object from json file generated by ``run()``
    """
    return ProtocRunner(tmpdir)

def test_empty_message(tmpdir, protoc):
    """Test against a protobuf message without any field."""
    tmpdir.join('empty.proto').write("""
        /// magic:SFaka
        message empty { }
    """)
    r = protoc.run('empty.proto')
    assert r == 0

    data = protoc.json('empty.json')
    pprint(data)
    assert data.has_key('filename') and data['filename'] == 'empty.proto'
    assert data.has_key('package') and data['package'] == 'root'
    assert len(data['items']) == 1
    assert data['items'][0]['name'] == 'empty'
    assert data['items'][0]['type'] == 'message'
    assert 'magic:SFaka' in data['items'][0]['doc']

def test_simple_message(tmpdir, protoc):
    tmpdir.join('simple.proto').write("""
        /// magic:2raKj
        message simple {
            required int32 foo = 1; /// magic:Ouak2
        }
    """)

    r = protoc.run('simple.proto')
    assert r == 0

    data = protoc.json('simple.json')
    pprint(data)
    assert data.has_key('filename') and data['filename'] == 'simple.proto'
    assert data.has_key('package') and data['package'] == 'root'
    assert len(data['items']) == 1
    assert data['items'][0]['name'] == 'simple'
    assert data['items'][0]['type'] == 'message'
    assert 'magic:2raKj' in data['items'][0]['doc']
    assert len(data['items'][0]['fields']) == 1
    assert data['items'][0]['fields'][0]['label'] == 'required'
    assert data['items'][0]['fields'][0]['type'] == 'int32'
    assert data['items'][0]['fields'][0]['name'] == 'foo'
    assert data['items'][0]['fields'][0]['number'] == 1
    assert 'magic:Ouak2' in data['items'][0]['fields'][0]['doc']
#   assert 0

